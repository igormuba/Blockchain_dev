================ Blockchain development environment setup on Linux =======================

------------------------------------------------------------------------------------------
                                 Prerequisite
------------------------------------------------------------------------------------------
#docker installation, refer to https://docs.docker.com/install/
A) Install Docker Engine And Docker Compose
	1) Install Docker:
			curl -sSL https://get.docker.com | sh
	2) Adding your user to the "docker" group with something like:
			sudo usermod -aG docker pi
	3) Install docker compose:
	        sudo pip install docker-compose
			

B) Install Go language:
	#Not suggest use: `sudo apt-get install golang` to install golang
	#All golang package can be found on https://golang.org/dl/
	# First of all, download go package and extract to /usr/local
	#For Raspberry pi:
	wget https://storage.googleapis.com/golang/go1.9.3.linux-armv6l.tar.gz
	sudo tar -C /usr/local -xzf go1.9.3.linux-armv6l.tar.gz
	
	#For Ubuntu
	wget https://storage.googleapis.com/golang/go1.9.3.linux-amd64.tar.gz
	sudo tar -C /usr/local -xzf go1.9.3.linux-amd64.tar.gz
	
	# Add GOROOT and append to PATH
	sudo echo ‘export GOROOT=/usr/local/go’ >> ~/.bashrc
	sudo echo ‘export PATH=$PATH:$GOROOT/bin’ >> ~/.bashrc	
	

C) Reboot & Test
	go version
	docker -v
	docker-compose -v
	pip -V
	git --version
	

---------------------------------------------------------------------------------------------
								Ethereum Blockchain
---------------------------------------------------------------------------------------------
The following instruction introduce How to install an Ethereum blockchain node on Linux OS, 
like Raspberry Pi 3 and Ununtu.
Method 1): Install pre-compiled Geth
    First of all, download the geth client and extract it to /usr/local/geth.
		tar -C /usr/local/geth -xzf @package
		#replace @package with package name, like: geth-linux-arm7-1.6.7-ab5646c5.tar.gz
		
		export PATH=$PATH:/usr/local/geth to the /etc/profile 
	
Method 2): Build from source code
	As a firstt thing we start by updating our software
		sudo apt-get update
	1) download from official ethereum repository the Geth client
		git clone https://github.com/ethereum/go-ethereum.git
	2) Ether go-ethereum
		cd go-ethereum
	3  We use v1.7.3 for our project
		git checkout v1.7.3
	4) build geth
		make geth
	This will take several minutes to be done.
	5) Add go-ethereum executable bin path in ~/.bashrc
		export GOETHEREUM=~/Desktop/Github/Blockchain_dev/dev_sdk/ethereum/go-ethereum/build
		export PATH=$PATH:$GOETHEREUM/bin
	6) Check version 
		geth version

---------------------------------------------------------------------------------------------
								Smart Contract Development
reference:http://chainskills.com/2017/04/10/raspberry-pi-and-ethereum-the-epilogue/
---------------------------------------------------------------------------------------------
1) Prerequisite: make sure your Pi has node installed, if not, try install npm and node.js first.
	Install node.js by executing:
		pi$ curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
		pi$ sudo apt-get install nodejs
	
	Test installation:
		pi$ node -v
		v7.4.0

		pi$ npm -v
		4.0.5
		
2) We use truffle as development IDE, http://truffleframework.com/docs/
	Install truffle on RPI:
		pi$ sudo npm install -g truffle
	
	Test installation:
		pi$ truffle version
		Truffle v4.0.6 (core: 4.0.6)
		Solidity v0.4.19 (solc-js)
		
3) Prepare the project folder.
	1) New project folder:SmartToken
		pi$ mkdir -p ~/Projects/SmartToken
		
	2) Then, use Truffle to initiate your project: 
		pi$ cd ~/Projects/SmartToken
		pi$ truffle init
		
	3) Install Web3 module:
		pi$ cd ~/Projects/SmartToken
		pi$ npm install web3@0.20.1
	
	4) Develop smart contract
		refer to http://chainskills.com/2017/04/03/create-and-deploy-a-smart-contract-66/
		
	5) In general, test scripts are saved in ./test folder, you could execute test script like:
		pi$ node ./test/wc3_test_token.js

---------------------------------------------------------------------------------------------
								Python Development-Web3
reference:http://web3py.readthedocs.io/en/stable/quickstart.html#environment
---------------------------------------------------------------------------------------------	
1) Prerequisite
	Basic:
		sudo apt-get install python-pip python-dev build-essential
		sudo apt-get install python-setuptools 
	
	python3.5:
		sudo apt-get install python3-pip python3-dev python3-setuptools
		sudo python3.5 -m pip install pip --upgrade
		sudo python3.5 -m pip install setuptools --upgrade
		
2) Install Web3
	sudo python3.5 -m pip install web3

			